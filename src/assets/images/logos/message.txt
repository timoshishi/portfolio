Warehouse Tracking
Objective
Overview
Detailed Design
Backend Design
Option A: On-Device Collection and Triangulation
Option B: On-Device Collection and Server-Side Triangulation
Option C: Server-side Collection and Triangulation
Conclusion
Comments
Objective
Our client, Amazing Logistics, manages multiple large warehouses worldwide. Their newest “smart” warehouses include sensor networks that provide rich data sets to warehouse management to help with inventory and asset tracking. Our team has been asked to mimic some of these “smart” behaviors in legacy warehouses using existing systems.
Overview
Our client’s highest priority is to be able to track the location and speed of individual forklift vehicles in use in the facility. They plan to use the accumulated data to evaluate the efficiency of the routes that drivers take within the space in order to determine a more effective organization and use of their facilities. They will eventually use this data to improve safety conditions and to inform equipment purchasing decisions.
Detailed Design
Backend Design
While the new “smart” warehouses use bluetooth beacon technology for data collection, for existing warehouses we are planning to mount wifi-enabled devices on each vehicle and triangulate (see description below) the position based on signal strength relative to wifi access points, which are mounted at known, fixed positions in the ceiling. Data is collected a few times per second and will be stored for analysis. Presently, we are interested in identifying speeds, distance traveled, and driving characteristics of our forklifts.

To know exactly where you are requires three fixed points and your distance from each. We treat each wireless access point as a fixed location and infer the distances using signal strengths.



The wifi network exposes a robust API to developers, and there is currently plenty of bandwidth available to support this project. We’ve been discussing several implementation options around where and how triangulation should occur (on-device vs. server-side), which are outlined below.
Option A: On-Device Collection and Triangulation
In this approach, the vehicle-mounted devices will do the heavy lifting, periodically scanning for nearby access points and compiling a list of reachable access points and signal strengths. Each device will then approximate its location within the facility by triangulation based on the fixed locations of the access points. Finally, each device will submit its location estimate (referred to as a Ping) to the database before beginning the process again.

Pros:
Portability. Regardless of the brand of wifi network present, this solution will run without modification on most stock mobile devices.
Scalability. By putting the task of triangulation on the individual mobile devices, the server and database will be able to support many more forklifts.

Cons
Slow Processors. Inexpensive mobile devices often come with processors that may struggle even with simple triangulation. By the time the device figures out where it is, the forklift will probably be somewhere else.
Power Issues. If the on-vehicle devices are going to be computing triangulations all day, we will need to hardwire them to the forklifts so they will always be powered.
Option B: On-Device Collection and Server-Side Triangulation
Like Option A, the on-vehicle devices scan for and compile a list of reachable access points and signal strengths, but rather than computing the location (Ping) on the device, it sends the signal strength data to a central server for further processing. The central server determines the approximate location for each dataset through triangulation and records its estimate to the database.

Pros:
This solution will work regardless of the brand or functionality of the wifi network
This solution requires much less work from the under-powered Android devices

Cons
There is a single point of failure that could become overloaded
This solution depends on inexpensive devices to report data accurately and timely
Option C: Server-side Collection and Triangulation
Instead of depending on inexpensive, under-powered devices to collect this information, we could create a central server that communicates with the network access points through their API. While each forklift will still need a wifi-enabled device of some kind, this could be as simple as a prototype board. Periodically, each fixed access point will scan its surroundings and collect the signal strength and identifiers of reachable devices. These lists will be returned to a central server which will combine lists from the other access points and then triangulate the location of each device within the facility.

The central server will get the list of identifiers for reachable devices and then iterate over that list, making successive calls to determine the signal strength for each device. More work is needed to determine if we should pursue working with the network hardware vendor to get custom firmware to provide unique identifiers and signal strength information for each reachable device in a single call.

Pros:
This solution places the least burden on the facility’s wifi network.
This solution does not require sophisticated devices or on-device software.

Cons
We will have to aggregate readings from multiple access points before we can find the location of any vehicle.
This solution places a heavy burden on a single point of failure.

Conclusion
TODO: Explain which option(s) outlined in “Detailed Design” you recommend. 


























Comments
TODO: You should see the following open questions formatted as comments on the right side of this document. If you do not see one or several of these comments, please respond here (otherwise answer as a response to the comment). You do not need to respond in both places.
Open Question 1 - see context
I’m having a hard time understanding how we would write an algorithm to determine a vehicle’s average speed. I know that for each vehicle we collect data several times per second that includes coordinates and an associated timestamp, but these aren't guaranteed to be stored in any specific order. Could you describe the runtime of the algorithm to calculate a vehicle’s average speed?
Response:
Open Question 2 - see context
I imagine the current plan is tracking by latitude/longitude for these location estimates, but I worry about the level of granularity. How do you think that may impact Amazing Logistics' ability to achieve their analytics goals?
Response:

Open Question 3 - see context
What is the runtime of these operations? How do you know?
Response:
